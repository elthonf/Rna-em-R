#4 - Copia pesos definidos
redeVal$A0 = redeTre$A0
redeVal$A = redeTre$A
redeVal$B0 = redeTre$B0
redeVal$B = redeTre$B
redeVal = emf.rna.forward(redeVal)
corretos = which(emf.rna.var.to.label(cbind(redeVal$YD)) == emf.rna.var.to.label(cbind(redeVal$Y)))
cat("[", redeVal$cenario, "]", "Erro: ", redeVal$ET, ", Acurácia: ", length(corretos) / length(redeVal$Y) * 100.0, "%", "\n")
validacoes[[k]] = redeVal #Devolve rede validada para o vetor de redes
rm(i, k, redeVal, redeTre, corretos)
##### ##### ##### ##### ##### ##### ##### ##### ##### PRINT de resumo !!!!! !!!!!
for( k in 4 : 4){
r = inicial[[k]]
corretos = which(emf.rna.var.to.label(cbind(r$YD)) == emf.rna.var.to.label(cbind(r$Y)))
cat("[", r$cenario, "]", "Erro inicial: ", r$ET, ", Acurácia inicial: ", length(corretos) / length(r$Y) * 100.0, "%", "\n")
r = treinamentos[[k]]
corretos = which(emf.rna.var.to.label(cbind(r$YD)) == emf.rna.var.to.label(cbind(r$Y)))
cat("[", r$cenario, "]", "Erro: ", r$ET, ", Acurácia: ", length(corretos) / length(r$Y) * 100.0, "%", "\n")
r = validacoes[[k]]
corretos = which(emf.rna.var.to.label(cbind(r$YD)) == emf.rna.var.to.label(cbind(r$Y)))
cat("[", r$cenario, "]", "Erro: ", r$ET, ", Acurácia: ", length(corretos) / length(r$Y) * 100.0, "%", "\n")
rm(r, corretos, k)
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV", "BVSP")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:1000000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=1.5))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
#3 - Valida
redeVal = validacoes[[k]] #Copia rede a ser validada do vetor de redes (isola)
#4 - Copia pesos definidos
redeVal$A0 = redeTre$A0
redeVal$A = redeTre$A
redeVal$B0 = redeTre$B0
redeVal$B = redeTre$B
redeVal = emf.rna.forward(redeVal)
corretos = which(emf.rna.var.to.label(cbind(redeVal$YD)) == emf.rna.var.to.label(cbind(redeVal$Y)))
cat("[", redeVal$cenario, "]", "Erro: ", redeVal$ET, ", Acurácia: ", length(corretos) / length(redeVal$Y) * 100.0, "%", "\n")
validacoes[[k]] = redeVal #Devolve rede validada para o vetor de redes
rm(i, k, redeVal, redeTre, corretos)
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV", "BVSP")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k=1
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:100000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:1000000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=1.4))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
#3 - Valida
redeVal = validacoes[[k]] #Copia rede a ser validada do vetor de redes (isola)
#4 - Copia pesos definidos
redeVal$A0 = redeTre$A0
redeVal$A = redeTre$A
redeVal$B0 = redeTre$B0
redeVal$B = redeTre$B
redeVal = emf.rna.forward(redeVal)
corretos = which(emf.rna.var.to.label(cbind(redeVal$YD)) == emf.rna.var.to.label(cbind(redeVal$Y)))
cat("[", redeVal$cenario, "]", "Erro: ", redeVal$ET, ", Acurácia: ", length(corretos) / length(redeVal$Y) * 100.0, "%", "\n")
validacoes[[k]] = redeVal #Devolve rede validada para o vetor de redes
rm(i, k, redeVal, redeTre, corretos)
rm(list=ls())
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k=1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:100000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k=1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:100000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.11))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k=1
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:100000){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.11))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
1/100000
1/10000
2/10000
2/100000
2/(100000/2)
1/(100000/2)
1/(100/2)
1/(100000/2000)
1/(1/2000)
1/(100000/2000)
2000/10000
2000/100000
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
for(i in 1:100000){
redeTre = emf.rna.backward(rna = redeTre, alpha = min(0.9, 2000/i))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
i = 1
while (redeTre$ET > 0.001) {
redeTre = emf.rna.backward(rna = redeTre, alpha = min(0.9, 2000/i))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1;
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
i = 1
while (redeTre$ET > 0.001) {
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(0.1, 0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1;
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
i = 1
while (redeTre$ET > 0.001) {
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(0.1, 0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1;
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
#2 - Treina rede para o cenário recebido para américas
i = 1
while (redeTre$ET > 0.001) {
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(0.1, 0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1;
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
while (redeTre$ET > 0.001) {
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(0.1, 0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1;
}
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
i = 1;
#2 - Treina rede para o cenário recebido para américas
while(redeTre$ET > 0.001){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1
}
3%%100
300 %% 100
rm(list=ls())
#carrega dados e normaliza!
VARIACOES = read.csv("dados/variacoes.indices.csv", header = TRUE, sep = ";", dec = ",");
VARIACOES$Data = as.Date(VARIACOES$Data, format="%d/%m/%y");
VARIACOES[,3:19] = tanh(VARIACOES[,3:19]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)) *5, base = exp(1))
########## ########## ########## ########## ########## ##########
inicial = list();
treinamentos = list();
validacoes = list();
#Define dados iniciais para treinamento e dados de validacao para cenário 1
inicial[[1]] = emf.rna.read.csv.files(
cenario = "TRE 01", qtIn = 4, qtHid = 4, qtOut = 1,
X = as.matrix( VARIACOES[1:41, c("SPX", "MXX", "IPSA", "MERV")] ), #Define datas e bolsas (entre dias 01-abr-2016 e 31-mai-2016!)
YD = as.matrix( VARIACOES[2:42, c("BVSP")] ) )
validacoes[[1]] = inicial[[1]];
validacoes[[1]]$cenario = "VAL 01";
validacoes[[1]]$X = as.matrix( VARIACOES[42:63, c("SPX", "MXX", "IPSA", "MERV")] );
validacoes[[1]]$YD = as.matrix( VARIACOES[43:64, c("BVSP")] );
k = 1
#1 - Forward da rede inicial!
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
i = 1;
#2 - Treina rede para o cenário recebido para américas
while(redeTre$ET > 0.001){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
if(i %% 100 = 0 )
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1
}
cat("[", redeTre$cenario, "]", "Erro: ", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
treinamentos[[k]] = redeTre #Devolve rede treinada para o vetor de redes
redeTre = inicial[[k]] #Copia rede a ser treinada do vetor de redes (isola)
redeTre = emf.rna.forward(redeTre)
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
cat("[", redeTre$cenario, "]", "Erro inicial: ", redeTre$ET, ", Acurácia inicial: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
inicial[[k]] = redeTre; #Armazena rede inicial ativada no vetor de redes
i = 1;
#2 - Treina rede para o cenário recebido para américas
while(redeTre$ET > 0.001){
redeTre = emf.rna.backward(rna = redeTre, alpha = runif(1, min=0.1, max=0.9))
corretos = which(emf.rna.var.to.label(cbind(redeTre$YD)) == emf.rna.var.to.label(cbind(redeTre$Y)))
if(i %% 100 == 0 )
cat("[", redeTre$cenario, "]", "Iter:", i, "Erro:", redeTre$ET, ", Acurácia: ", length(corretos) / length(redeTre$Y) * 100.0, "%", "\n")
i = i + 1
}
library(emf.rna)
