if(is.null(rna$dynamic$dEdb)) rna$dynamic$dEdb = dEdb; #Armazena ultima atualizacao
for(h in 1:(rna$info$qtHid+1)){
for(o in 1:rna$info$qtOut){
dEdb[o,h] = e[pad, o] * dYdb[o,h, pad]; #rna$func2der(rna$dynamic$Yin[pad,o]) * Z[pad, h];
bnew[o,h] = B[o,h] - alpha * dEdb[o,h];# - alpha * 0.2 * rna$dynamic$dEdb[o,h]; #Atencao ao fator extra
rna$dynamic$dEdb[o, h] = dEdb[o, h]; #Salva  ultima atualizacao para usar como fator extra
}
}
#Atualiza dEda
dEda = matrix(data=0, nrow = rna$info$qtHid, ncol = (rna$info$qtIn + rna$info$qtRec + 1));
anew = matrix(nrow = rna$info$qtHid, ncol = (rna$info$qtIn + rna$info$qtRec + 1));
if(is.null(rna$dynamic$dEda)) rna$dynamic$dEda = dEda; #Ultima atualizacao
for(i in 1:(rna$info$qtIn + rna$info$qtRec + 1)){
for(h in 1:rna$info$qtHid){
#o = 1; #temporario
dEda[h,i] = sum( e[pad, ] * rna$func2der(rna$dynamic$Yin[pad, ]) * rna$dynamic$B[ ,h]) * rna$func1der(rna$dynamic$Zin[pad,h]) * X[pad,i];
anew[h,i] = A[h,i] - alpha * dEda[h,i];# - alpha * 0.2 * rna$dynamic$dEda[h,i]; #Atencao ao fator extra
rna$dynamic$dEda[h, i] = dEda[h, i]; #Salva  ultima atualizacao para usar como fator extra
}
}
#3 Atualiza A e B
if(camada2){
rna$dynamic$B0 = bnew[,1, drop=FALSE];
rna$dynamic$B  = bnew[,2:dim(bnew)[2], drop=FALSE];
}
if(camada1){
rna$dynamic$A0 = anew[,1, drop=FALSE];
rna$dynamic$A  = anew[,2:(rna$info$qtIn+1), drop=FALSE];
rna$dynamic$C  = anew[,(rna$info$qtIn+2):dim(anew)[2], drop=FALSE];
}
#Atualiza o erros para usar no próximo padrão.
rna$dynamic = emf.rna.forward.padrao( rna, padrao = pad );
}
dYdb[1,,1:30]
dYdb[1,,1:40]
rna = treina.rede[[idCenario]]
padrao = 1 : dim(rna$X)[1]; #Com recorrência, sempre faz todos os padrões.
Z = cbind(1, rna$dynamic$Z); #ADD Bias
X = cbind(1, rna$X, rna$dynamic$R); #ADD Bias e recorrencia externa
dYdb = array(data=0, dim =  c(rna$info$qtOut, rna$info$qtHid+1, dim(rna$X)[1])); #Cria array de 3 DIMENSÕES!!!
dYdb = array(data=0, dim =  c(rna$info$qtOut, rna$info$qtHid+1, dim(rna$X)[1])); #Cria array de 3 DIMENSÕES!!!
#Atualiza dYdb
for(pad in padrao){
#Variaveis a usar na recorrencia!
padMax = max(0, pad - 1);
padMin = max(ifelse(padMax ==0, 0, 1), pad - rna$info$qtRec);
cMax = rna$info$qtRec;
cMin = cMax - (padMax - padMin);
for(h in 1:(rna$info$qtHid+1)){
for(o in 1:rna$info$qtOut){ # Obs.: Qtde Out = 1 APENAS!!!
#Z[pad, h] = Z atual para o neurônio H em questão. O BIAS é o primeiro
#Em seguida, SOMA o produto de : B (Sem o BIAS)
if(pad == 1){
dYdbTermo2 = 0;
}else{ #Não possui a derivada de f´ foi é linear
dYdbTermo2 = t(rna$dynamic$B[o,]) %*% ( rna$dynamic$C[,cMin:cMax] * dYdb[o,2:(rna$info$qtHid+1),padMin:padMax ] );
}
dYdb[o,h, pad] = Z[pad, h] + sum( dYdbTermo2 );
}
}
}
dYdb[1,,1:40]
dYdb[1,,1:70]
dYdb[1,,1:79]
rna = treina.rede[[idCenario]]
padrao = 1 : 28
Z = cbind(1, rna$dynamic$Z); #ADD Bias
X = cbind(1, rna$X, rna$dynamic$R); #ADD Bias e recorrencia externa
dYdb = array(data=0, dim =  c(rna$info$qtOut, rna$info$qtHid+1, dim(rna$X)[1])); #Cria array de 3 DIMENSÕES!!!
#Atualiza dYdb
for(pad in padrao){
#Variaveis a usar na recorrencia!
padMax = max(0, pad - 1);
padMin = max(ifelse(padMax ==0, 0, 1), pad - rna$info$qtRec);
cMax = rna$info$qtRec;
cMin = cMax - (padMax - padMin);
for(h in 1:(rna$info$qtHid+1)){
for(o in 1:rna$info$qtOut){ # Obs.: Qtde Out = 1 APENAS!!!
#Z[pad, h] = Z atual para o neurônio H em questão. O BIAS é o primeiro
#Em seguida, SOMA o produto de : B (Sem o BIAS)
if(pad == 1){
dYdbTermo2 = 0;
}else{ #Não possui a derivada de f´ foi é linear
dYdbTermo2 = t(rna$dynamic$B[o,]) %*% ( rna$dynamic$C[,cMin:cMax] * dYdb[o,2:(rna$info$qtHid+1),padMin:padMax ] );
}
dYdb[o,h, pad] = Z[pad, h] + sum( dYdbTermo2 );
}
}
}
pad = pad + 1
padMax = max(0, pad - 1);
padMin = max(ifelse(padMax ==0, 0, 1), pad - rna$info$qtRec);
cMax = rna$info$qtRec;
cMin = cMax - (padMax - padMin);
t(rna$dynamic$B[o,])
rna$dynamic$C[,cMin:cMax]
dYdb[o,2:(rna$info$qtHid+1),padMin:padMax ]
dYdb[1,,1:31]
rna$dynamic$C[,cMin:cMax] * dYdb[o,2:(rna$info$qtHid+1),padMin:padMax ]
t(rna$dynamic$B[o,])
library(emf.rna)
for(i in 1:10000){
treina.rede[[idCenario]]$dynamic = emf.rna.backward.recorrencia(rna = treina.rede[[idCenario]], alpha.min = 0.01, alpha.max = 0.01);
logExec( i, treina.rede[[idCenario]] );
}
library(emf.rna)
treina.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "TRE", idCenario) ,
qtIn = dim(treina.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1, qtRec = 3,
X = as.matrix( treina.X[[idCenario]] ), YD = as.matrix( treina.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
#Cria a rede de validacao
valida.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "VAL", idCenario) ,
qtIn = dim(valida.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1, qtRec = 3,
X = as.matrix( valida.X[[idCenario]] ), YD = as.matrix( valida.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
#Executa Inicial
treina.rede[[idCenario]]$dynamic = emf.rna.forward.padrao(treina.rede[[idCenario]]);
print("Início rede.")
logExec( 0, treina.rede[[idCenario]] );
for(i in 1:10000){
treina.rede[[idCenario]]$dynamic = emf.rna.backward.recorrencia(rna = treina.rede[[idCenario]], alpha.min = 0.01, alpha.max = 0.01);
logExec( i, treina.rede[[idCenario]] );
}
rm(list=ls())
# ########## ########## ########## Carrega dados e normaliza!  ########## ########## ##########
COTACOES = read.csv("dados/cotacoes2.csv", header = TRUE, sep = ",", dec = ".");
COTACOES$Date = as.Date(COTACOES$Date, format="%Y-%m-%d");
COTACOES[,c( 11, 16:32) ] = tanh(COTACOES[,c( 11, 16:32) ]/5); #Normalizando . inverso seria log(sqrt( (1 + y) / (1 - y)), base = exp(1))*5
COTACOES[,20:32 ][is.na(COTACOES[,20:32 ])] = 0.0   #Transforma NA´S em Zeros
#Dados entre 1 e 80 para treinamento (entre 2016-01-04 e 2016-04-29 : 4 meses )
#Dados entre 81 e 123 para validacao (entre 2016-05-02 e 2016-06-30 : 2 meses )
########## ########## ########## ########## ########## ##########
treina.X = list(); treina.Y = list(); valida.X = list(); valida.Y = list(); treina.rede = list();  valida.rede = list();
qtde.neuronios = c( 2, 3, 4, 5, 5, 5, 5, 10, 2, 3, 4, 5, 5, 5, 5, 3, 5, 5, 5, 5, 3, 5, 5, 5, 5 )
#Cenário 1
treina.X[[1]] = cbind( COTACOES[1:79, "Var"], COTACOES[2:80, "Var"])
treina.Y[[1]] = COTACOES[2:80, "D1v"]
valida.X[[1]] = cbind( COTACOES[81:122, "Var"], COTACOES[82:123, "Var"])
valida.Y[[1]] = COTACOES[82:123, "D1v"]
logExec <- function( i, rede ){
corretos = which(emf.rna.var.to.label(cbind(rede$YD)) == emf.rna.var.to.label(cbind(rede$dynamic$Y)))
if(i%%100 == 0) cat("[", rede$cenario, "]", "Iter:", i, "Erro:", rede$dynamic$ET, ", Acurácia: ", length(corretos) / length(rede$YD) * 100.0, "%", "\n")
}
execCenario <- function (idCenario){
#Cria a rede de treinamento
treina.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "TRE", idCenario) ,
qtIn = dim(treina.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1,
X = as.matrix( treina.X[[idCenario]] ), YD = as.matrix( treina.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
#Cria a rede de validacao
valida.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "VAL", idCenario) ,
qtIn = dim(treina.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1,
X = as.matrix( valida.X[[idCenario]] ), YD = as.matrix( valida.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
#Executa Inicial
treina.rede[[idCenario]]$dynamic = emf.rna.forward(treina.rede[[idCenario]]);
print("Início rede.")
logExec( 0, treina.rede[[idCenario]] );
print("Início treinamento.")
#LOOP de treinamento
alpha.min = 0.1;
alpha.max = 0.3;
for(i in 1:1000){
lastET = treina.rede[[idCenario]]$dynamic$ET;
treina.rede[[idCenario]]$dynamic = emf.rna.backward.padrao(rna = treina.rede[[idCenario]], alpha.min = alpha.min, alpha.max = alpha.max);
logExec( i, treina.rede[[idCenario]] );
}
#Copia pesos para rede de validacao
valida.rede[[idCenario]]$dynamic$A0 = treina.rede[[idCenario]]$dynamic$A0;
valida.rede[[idCenario]]$dynamic$B0 = treina.rede[[idCenario]]$dynamic$B0;
valida.rede[[idCenario]]$dynamic$A = treina.rede[[idCenario]]$dynamic$A;
valida.rede[[idCenario]]$dynamic$B = treina.rede[[idCenario]]$dynamic$B;
#Executa Validacao
valida.rede[[idCenario]]$dynamic = emf.rna.forward(valida.rede[[idCenario]]);
logExec( 0, valida.rede[[idCenario]] );
}
execCenario(1)
idCenario = 1
treina.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "TRE", idCenario) ,
qtIn = dim(treina.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1,
X = as.matrix( treina.X[[idCenario]] ), YD = as.matrix( treina.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
library(emf.rna)
treina.rede[[idCenario]] = emf.rna.read.csv.files(
cenario = paste( "TRE", idCenario) ,
qtIn = dim(treina.X[[idCenario]])[2], qtHid = qtde.neuronios[idCenario], qtOut = 1,
X = as.matrix( treina.X[[idCenario]] ), YD = as.matrix( treina.Y[[idCenario]] ),
func2 = emf.rna.func.tunnel, func2der = emf.rna.func.tunnel.der);
execCenario(1)
View(COTACOES)
typeof(idCenario)
rm(list=ls())
load("~/Documents/RProjects/emf.rna/dados/MLP Exec.RData")
log.tab[1:100]
log.tab[1:100,]
log.tab[log.tab$cenario == "TRE 1",][1:100]
log.tab[log.tab$cenario == "TRE 1",][1:100,]
log.tab[log.tab$cenario == "TRE 1"][1:100,]
log.tab[log.tab$cenario == "TRE 1",][1:100,]
log.grafico = list()
log.grafico$"TRE 1" = 1
paste("TRE", 1:25)
nomes.treina = paste("TRE", 1:25)
nomes.valida = paste("VAL", 1:25)
log.grafico["TRE 2"] = 2
for ( i in nomes.treina){
}rm(i)
for ( i in nomes.treina){
}
rm(i)
for ( i in nomes.treina){
print (i)
}
rm(i)
i = "TRE 1"
log.tab[log.tab$cenario == "TRE 1",][1:100,]
y = log.tab[log.tab$cenario == "TRE 1","ET"]
plot( y = y)
View(COTACOES)
plot( x = y)
plot( x = y[1:100])
plot( x = y[1:100], type = "l")
plot( x = y[2:100], type = "l")
plot( x = y[1:100], type = "l")
plot( x = y[2:100], type = "l")
plot( x = y[1:100], type = "l")
plot( x = y[1:50], type = "l")
plot( x = y[2:50], type = "l")
plot( x = y[2:20], type = "l")
log.grafico["TRE 1"] = log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico["TRE 2"] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico["TRE 1"] = log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico = list()
log.grafico["TRE 1"] = log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico["TRE 1",] = log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico$"TRE 1" = log.tab[log.tab$cenario == "TRE 1","ET"]
log.grafico["TRE 2"] = log.tab[log.tab$cenario == "TRE 2","ET"]
a = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico["TRE 2"] = a
log.grafico["TRE 2",] = a
log.grafico[,"TRE 2"] = log.tab[log.tab$cenario == "TRE 2","ET"]
rm(a)
rm(i)
log.grafico$[i] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[i] = log.tab[log.tab$cenario == "TRE 2","ET"]
i = "TRE 2"
log.grafico[i] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico$i = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico$["TRE 2"] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico$[i] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[i] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[i,] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == "TRE 2","ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
log.grafico = list()
for ( i in nomes.treina){
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
print (i)
}
rm(i)
plot( x = log.grafico, type = "l")
dat <- matrix(runif(40,1,20),ncol=4) # make data
matplot(dat, type = c("b"),pch=1,col = 1:4) #plot
legend("topleft", legend = 1:4, col=1:4, pch=1) # optional legend
matplot(dat, type = c("b"),pch=1,col = 1:4) #plot
log.grafico.frame = data.frame(log.grafico)
View(log.grafico.frame)
matplot(log.grafico.frame, type = c("b"),pch=1,col = 1:25) #plot
log.grafico.frame = log.grafico.frame[1:1000,]
log.grafico.frame = log.grafico.frame[1:1001,]
log.grafico.frame = data.frame(log.grafico)
log.grafico.frame = log.grafico.frame[1:1001,]
matplot(log.grafico.frame, type = c("b"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
legend("topleft", legend = 1:25, col=1:25, pch=1) # optional legend
legend("left", legend = 1:25, col=1:25, pch=1) # optional legend
legend("topleft", legend = 1:25, col=1:25, pch=1) # optional legend
legend("topleft", legend = 1:5, col=1:5, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
legend("topleft", legend = 1:5, col=1:5, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
legend("topleft", legend = 1:25, col=1:25, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
legend("topleft", legend = 1:25, col=1:25, pch=1) # optional legend
legend("topleft", legend = nomes.treina, col=1:25, pch=1) # optional legend
legend("topleft", legend = nomes.treina, col=1:25, pch=1, lty = "l") # optional legend
legend("topleft", legend = nomes.treina, col=1:25, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
log.tab[log.tab$cenario == "TRE 1",][1:100,]
log.grafico = list()
for ( i in nomes.treina){
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
print (i)
}
rm(i)
plot( x = log.grafico, type = "l")
plot( x = log.grafico$`TRE 1`, type = "l")
plot( x = log.grafico$"TRE 1", type = "l")
plot( x = log.grafico$"TRE 2", type = "l")
plot( x = log.grafico$"TRE 3", type = "l")
plot( x = log.grafico$"TRE 3"[1:100,], type = "l")
plot( x = log.grafico$"TRE 3"[1:100], type = "l")
plot( x = log.grafico$"TRE 3"[1:10], type = "l")
plot( x = log.grafico$"TRE 1"[1:10], type = "l")
plot( x = log.grafico$"TRE 5"[1:10], type = "l")
plot( x = log.grafico$"TRE 5"[0:10], type = "l")
plot( x = log.grafico$"TRE 5"[1:10], type = "l")
plot( x = log.grafico$"TRE 5"[1:10], type = "l")
plot( x = log.grafico$"TRE 5"[0:10], type = "l")
plot( x = log.grafico$"TRE 5"[-10:10], type = "l")
plot( x = log.grafico$"TRE 5"[0:10], type = "l")
plot( x = log.grafico$"TRE 5"[1:10], type = "l")
matplot(log.grafico.frame, type = c("b"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
rm(list=ls())
load("~/Documents/RProjects/emf.rna/dados/MLP Exec.RData")
nomes.treina = paste("TRE", 1:25)
nomes.valida = paste("VAL", 1:25)
#log.tab[1:100,]
#log.tab[log.tab$cenario == "TRE 1",][1:100,]
log.grafico = list()
#log.grafico$"TRE 1" = 1
#log.grafico["TRE 2"] = 2
#log.grafico$"TRE 1" = log.tab[log.tab$cenario == "TRE 1","ET"]
#log.grafico$i = log.tab[log.tab$cenario == "TRE 2","ET"]
for ( i in nomes.treina){
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
print (i)
}
rm(i)
plot( x = log.grafico$"TRE 5"[1:10], type = "l")
log.grafico.frame = data.frame(log.grafico)
log.grafico.frame = log.grafico.frame[1:1001,]
log.grafico.frame = data.frame(log.grafico)[1:1001,]
matplot(log.grafico.frame, type = c("b"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
log.resumo
log.resumo[[1]]
log.resumo[[0]]
log.resumo[[1]]
log.resumo
log.resumo[[20003]]
log.resumo[20003,]
row.names(log.resumo)
row.names(log.resumo) %%2 == 0
row.names(log.resumo) % 2 == 0
log.resumo
1:25 % 2
(1:25) % 2
(1:25) %% 2
((1:100) %% 2 == 0 )
log.resumo.treina = log.resumo[((1:100) %% 2 == 0 ),]
View(log.resumo.treina)
log.resumo.treina = log.resumo[((1:100) %% 2 != 0 ),]
log.resumo.valida = log.resumo[((1:100) %% 2 == 0 ),]
View(log.resumo.treina)
cbind(log.resumo.treina[1:25,] , log.resumo.treina[26:50,])
cbind(log.resumo.treina[1:25,] , log.resumo.treina[26:50,c("iteracao", "ET", "acuracia")])
cbind( log.resumo.treina[1:25,c("cenario", "iteracao", "ET", "acuracia")],
log.resumo.treina[26:50,c("iteracao", "ET", "acuracia")],
log.resumo.valida[1:25,c("cenario","iteracao", "ET", "acuracia")],
log.resumo.valida[26:50,c("iteracao", "ET", "acuracia")])
cbind( log.resumo.treina[1:25,c("cenario", "iteracao", "ET", "acuracia")],
log.resumo.treina[26:50,c("iteracao", "ET", "acuracia")],
log.resumo.valida[1:25,c("cenario","iteracao", "ET", "acuracia")],
log.resumo.valida[26:50,c("iteracao", "ET", "acuracia")])
log.resumo.treina = log.resumo[((1:100) %% 2 != 0 ),]
log.resumo.valida = log.resumo[((1:100) %% 2 == 0 ),]
log.resumo.final = cbind( log.resumo.treina[1:25,c("cenario", "iteracao", "ET", "acuracia")],
log.resumo.treina[26:50,c("iteracao", "ET", "acuracia")],
log.resumo.valida[1:25,c("cenario","iteracao", "ET", "acuracia")],
log.resumo.valida[26:50,c("iteracao", "ET", "acuracia")])
rm(log.resumo.treina, log.resumo.valida)
View(log.resumo.final)
write.csv(x = log.resumo.final, file="dados/MLP.log.artigo.csv")
legend("topleft", legend = nomes.treina, col=1:25, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8) #plot
legend("topleft", legend = nomes.treina, col=1:8, pch=1) # optional legend
legend("topleft", legend = nomes.treina, col=1:8, pch=1, lty = "l") # optional legend
legend("topleft", legend = nomes.treina, col=1:8, pch=1, bty = "n") # optional legend
legend("topleft", legend = nomes.treina, col=1:8, pch=1, trace = TRUE) # optional legend
legend("topleft", legend = nomes.treina, col=1:8, pch=1) # optional legend
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = NULL) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame, type = c("b"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame[,1:25], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topleft", legend = nomes.treina, col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina, col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina, col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina, col=1:8, pch=1) # optional legend
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1) # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1) # optional legend
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1, title = "Legenda") # optional legend
matplot(log.grafico.frame[,1:8], type = c("l"),pch=1,col = 1:8, ylab = "") #plot
legend("topright", legend = nomes.treina[1:8], col=1:8, pch=1, title = "Legenda") # optional legend
exibegrafico = 1:8
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "Legenda") # optional legend
exibegrafico = 9:15 #48 horas
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "Legenda") # optional legend
exibegrafico = 16:20 #1 semana
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "Legenda") # optional legend
exibegrafico = 21:25 #1 mês
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "Legenda") # optional legend
exibegrafico = 16:20 #1 semana
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "Legenda") # optional legend
exibegrafico = 1:8 #24 horas
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "24 horas") # optional legend
exibegrafico = 9:15 #48 horas
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "48 horas") # optional legend
exibegrafico = 16:20 #1 semana
exibegrafico = 16:20 #1 semana
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 semana") # optional legend
exibegrafico = 21:25 #1 mês
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 semana") # optional legend
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 mês") # optional legend
View(log.resumo)
rm(list=ls())
load("~/Documents/RProjects/emf.rna/dados/RecExt Exec.RData")
rm(list=ls())
nomes.treina = paste("TRE", 1:25)
nomes.valida = paste("VAL", 1:25)
log.grafico = list()
for ( i in nomes.treina){
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
print (i)
}
rm(i)
load("~/Documents/RProjects/emf.rna/dados/RecExt Exec.RData")
nomes.treina = paste("TRE", 1:25)
nomes.valida = paste("VAL", 1:25)
#log.tab[1:100,]
#log.tab[log.tab$cenario == "TRE 1",][1:100,]
log.grafico = list()
#log.grafico$"TRE 1" = 1
#log.grafico["TRE 2"] = 2
#log.grafico$"TRE 1" = log.tab[log.tab$cenario == "TRE 1","ET"]
#log.grafico$i = log.tab[log.tab$cenario == "TRE 2","ET"]
for ( i in nomes.treina){
log.grafico[[i]] = log.tab[log.tab$cenario == i,"ET"]
print (i)
}
rm(i)
log.grafico.frame = data.frame(log.grafico)[1:1001,]
matplot(log.grafico.frame, type = c("l"),pch=1,col = 1:25) #plot
exibegrafico = 1:8 #24 horas
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 mês") # optional legend
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "24 horas") # optional legend
exibegrafico = 9:15 #48 horas
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "48 horas") # optional legend
exibegrafico = 16:20 #1 semana
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 semana") # optional legend
exibegrafico = 21:25 #1 mês
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 mês") # optional legend
exibegrafico = 16:20 #1 semana
matplot(log.grafico.frame[,exibegrafico], type = c("l"),pch=1,col = exibegrafico, ylab = "") #plot
legend("topright", legend = nomes.treina[exibegrafico], col=exibegrafico, pch=1, title = "1 semana") # optional legend
View(log.resumo)
log.resumo.treina = log.resumo[((1:100) %% 2 != 0 ),]
log.resumo.valida = log.resumo[((1:100) %% 2 == 0 ),]
log.resumo.final = cbind( log.resumo.treina[1:25,c("cenario", "iteracao", "ET", "acuracia")],
log.resumo.treina[26:50,c("iteracao", "ET", "acuracia")],
log.resumo.valida[1:25,c("cenario","iteracao", "ET", "acuracia")],
log.resumo.valida[26:50,c("iteracao", "ET", "acuracia")])
rm(log.resumo.treina, log.resumo.valida)
write.csv(x = log.resumo.final, file="dados/Externa.log.artigo.csv")
View(log.resumo.final)
R.version
